#! /usr/bin/python
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


import logging
from optparse import OptionParser
import codecs

from compare_locales.paths import EnumerateApp
from compare_locales.compare import compareApp
from compare_locales import version

usage = 'usage: %prog [options] l10n.ini l10n_base_dir language1 [language2 ...]'
parser = OptionParser(usage = usage, version = "%%prog %s" % version)

parser.add_option('-v', '--verbose', action='count', dest='v', default=0,
                  help='Make more noise')
parser.add_option('-q', '--quiet', action='count', dest='q', default=0,
                  help='Make less noise')
parser.add_option('-r', '--reference', default='en-US', dest='reference',
                  help='Explicitly set the reference '+
                  'localization. [default: en-US]')
parser.add_option('-m', '--merge',
                  help='Use this directory to stage merged files')
parser.add_option('--clobber-merge', action="store_true", default=False, dest='clobber',
                  help="""WARNING: DATALOSS.
Use this option with care. If specified, the merge directory will
be clobbered for each module. That means, the subdirectory will
be completely removed, any files that were there are lost.
Be careful to specify the right merge directory when using this option.""")
parser.add_option('--data', choices=['text', 'exhibit', 'json'], default='text',
                  help='''Choose data and format (one of text, exhibit, json)
text: (default) Show which files miss which strings,
               together with warnings and errors. Also prints a summary
json: Serialize the internal tree, useful for tools. Also always succeeds
exhibit: Serialize the summary data in a json useful for Exhibit''')

(options, args) = parser.parse_args()
if len(args) < 2:
  parser.error('At least two arguments required')
inipath, l10nbase = args[:2]
locales = args[2:]

if len(locales) != 1 and options.merge:
  parser.error('l10n-merge only possible for one locale at a time')

# log as verbose or quiet as we want, warn by default
logging.basicConfig()
logging.getLogger().setLevel(logging.WARNING - (options.v - options.q)*10)

app = EnumerateApp(inipath, l10nbase, locales)
app.reference = options.reference

try:
  o = compareApp(app, merge_stage = options.merge, clobber = options.clobber)
except (OSError, IOError), e:
  print "FAIL: " + str(e)
  parser.exit(2)

print codecs.utf_8_encode(o.serialize(type=options.data))[0]

if not options.merge and options.data is 'text':
  # if not merging, error on really missing strings
  totalMissing = 0
  for k in ('missing', 'missingInFiles'):
    for summary in o.summary.values():
      if k in summary:
        totalMissing = summary[k]
  if totalMissing:
    parser.exit(1)
