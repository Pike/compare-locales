#! /usr/bin/python
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


import logging
from optparse import OptionParser
import codecs

from Mozilla.Paths import EnumerateApp
from Mozilla.CompareLocales import compareApp
from Mozilla import version

usage = 'usage: %prog [options] l10n.ini l10n_base_dir language1 [language2 ...]'
parser = OptionParser(usage = usage, version = "%%prog %s" % version)

parser.add_option('-v', '--verbose', action='count', dest='v', default=0,
                  help='Make more noise')
parser.add_option('-q', '--quiet', action='count', dest='q', default=0,
                  help='Make more noise')
parser.add_option('-r', '--reference', default='en-US', dest='reference',
                  help='Explicitly set the reference '+
                  'localization. [default: en-US]')
parser.add_option('-m', '--merge',
                  help='Use this directory to stage merged files')
parser.add_option('--clobber-merge', action="store_true", default=False, dest='clobber',
                  help="""WARNING: DATALOSS.
Use this option with care. If specified, the merge directory will
be clobbered for each module. That means, the subdirectory will
be completely removed, any files that were there are lost.
Be careful to specify the right merge directory when using this option.""")
parser.add_option('--json', action='store_true', dest='json',
                  help='Dump just summary as exhibit JSON')

(options, args) = parser.parse_args()
if len(args) < 3:
  parser.error('At least one language required')
inipath, l10nbase = args[:2]
locales = args[2:]

# log as verbose or quiet as we want, warn by default
logging.basicConfig()
logging.getLogger().setLevel(logging.WARNING - (options.v - options.q)*10)

app = EnumerateApp(inipath, l10nbase, locales)
app.reference = options.reference

try:
  o = compareApp(app, merge_stage = options.merge, clobber = options.clobber)
except (OSError, IOError), e:
  print "FAIL: " + str(e)
  parser.exit(2)
so = {}
if options.json:
  so['type']='application/json'
print codecs.utf_8_encode(o.serialize(**so))[0]

if not options.merge:
  # if not merging, error on really missing strings
  totalMissing = 0
  for k in ('missing', 'missingInFiles'):
    for summary in o.summary.values():
      if k in summary:
        totalMissing = summary[k]
  if totalMissing:
    parser.exit(1)
